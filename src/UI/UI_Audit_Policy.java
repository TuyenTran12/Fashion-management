/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import java.net.URL;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import oracle.jdbc.OracleTypes;

/**
 *
 * @author LunChan
 */
public class UI_Audit_Policy extends javax.swing.JPanel {

    /**
     * Creates new form UI_Audit_Policy
     */
    public UI_Audit_Policy() {
        initComponents();
        getAuditTrailReport(jTable_ShowAuit_Policy);
        loadDBUsers();
        loadObjectNames();
    }

    private static Connection connection;

    static {
        // Mở kết nối đến cơ sở dữ liệu khi lớp được nạp
        connection = DAO.Dataservice.Getconnect();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_ShowAuit_Policy = new javax.swing.JTable();
        jButton_GiamSat = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox_Username = new javax.swing.JComboBox<>();
        jComboBox_TableName = new javax.swing.JComboBox<>();

        jLabel1.setText("Username :");

        jTable_ShowAuit_Policy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Người dùng", "Đối tượng", "SQL*Text", "Thời gian truy cập"
            }
        ));
        jScrollPane2.setViewportView(jTable_ShowAuit_Policy);

        jButton_GiamSat.setText("Giám Sát");
        jButton_GiamSat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_GiamSatActionPerformed(evt);
            }
        });

        jLabel2.setText("Tên bảng :");

        jComboBox_Username.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox_TableName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox_Username, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_TableName, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(jButton_GiamSat, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(374, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_Username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_TableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jButton_GiamSat, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_GiamSatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_GiamSatActionPerformed
         // Retrieve selected values from the JComboBox components
        String userName = (String) jComboBox_Username.getSelectedItem();
        String tableName = (String) jComboBox_TableName.getSelectedItem();

        setTableAudit(tableName, userName);
        getAuditTrailReport(jTable_ShowAuit_Policy);
    }//GEN-LAST:event_jButton_GiamSatActionPerformed

    public static void getAuditTrailReport(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0); // Clear existing data

        try (CallableStatement cstmt = connection.prepareCall("{call sys.Proc_GetAuditTrail(?)}")) {
            // Set output parameter for the stored procedure
            cstmt.registerOutParameter(1, OracleTypes.CURSOR);
            // Execute the stored procedure
            cstmt.execute();
            // Retrieve the result set from the stored procedure
            try (ResultSet rs = (ResultSet) cstmt.getObject(1)) {
                // Populate the JTable model with data
                while (rs.next()) {
                    Object[] rowData = new Object[]{
                        rs.getString("db_user"),
                        rs.getString("object_name"),
                        rs.getString("sql_text"),
                        rs.getString("extended_timestamp")
                        // Add more columns if needed
                    };
                    model.addRow(rowData);
                }
            }
        } catch (SQLException e) {
            // Display user-friendly error message
            JOptionPane.showMessageDialog(null, "An error occurred while retrieving audit trail data: " 
                    + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // Log the exception for debugging
        }
    }
    
    public static void setTableAudit(String tableName, String userName) {
        try {
            CallableStatement cstmt = connection.prepareCall("{call sys.Proc_SetTableAudit(?, ?)}");

            // Thiết lập tham số đầu vào cho stored procedure
            cstmt.setString(1, tableName);
            cstmt.setString(2, userName);

            // Thực thi stored procedure
            cstmt.execute();

            JOptionPane.showMessageDialog(null, "Thành công.");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadDBUsers() {
        try {
            // Call the stored procedure
            try (CallableStatement cstmt = connection.prepareCall("{call Proc_GetDBUsers(?)}")) {
                // Register the OUT parameter for the cursor
                cstmt.registerOutParameter(1, OracleTypes.CURSOR);
                // Execute the stored procedure
                cstmt.execute();
                // Retrieve the result set from the stored procedure
                try (ResultSet rs = (ResultSet) cstmt.getObject(1)) {
                    // Clear existing items in jComboBox_Username
                    jComboBox_Username.removeAllItems();
                    // Populate jComboBox_Username with db_user values
                    while (rs.next()) {
                        String dbUser = rs.getString("db_user");
                        jComboBox_Username.addItem(dbUser);
                    }
                }
            }
        } catch (SQLException e) {
            // Handle SQL exception
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An error occurred while loading DB users: " + e.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void loadObjectNames() {
        try {
            // Call the stored procedure
            try (CallableStatement cstmt = connection.prepareCall("{call Proc_GetObjectNames(?)}")) {
                // Register the OUT parameter for the cursor
                cstmt.registerOutParameter(1, OracleTypes.CURSOR);
                // Execute the stored procedure
                cstmt.execute();
                // Retrieve the result set from the stored procedure
                try (ResultSet rs = (ResultSet) cstmt.getObject(1)) {
                    // Clear existing items in jComboBox_TableName
                    jComboBox_TableName.removeAllItems();
                    // Populate jComboBox_TableName with object_name values
                    while (rs.next()) {
                        String objectName = rs.getString("object_name");
                        jComboBox_TableName.addItem(objectName);
                    }
                }
            }
        } catch (SQLException e) {
            // Handle SQL exception
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An error occurred while loading object names: " 
                    + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_GiamSat;
    private javax.swing.JComboBox<String> jComboBox_TableName;
    private javax.swing.JComboBox<String> jComboBox_Username;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_ShowAuit_Policy;
    // End of variables declaration//GEN-END:variables
}
